import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
// import { fetchEventsApi, fetchEventByIdApi } from '@/api/events'

export interface Leader {
  id: number
  name: string
  score: number
  avatarUrl: string
}

export interface Activity {
  icon: string
  name: string
  color: string
}

export interface Media {
  id: number
  url: string
  media_type: 'image' | 'document'
  name?: string
  order: number
}

export interface IEvent {
  id: number
  title: string
  is_team: boolean
  date: string
  state: 'future' | 'current' | 'past'
  description: string
  start_time?: string
  end_time?: string
  max_members?: number
  max_teams?: number
  media: Media[]
  leaderboard?: Leader[]
  activities?: Activity[]
}

export const useEventStore = defineStore('events', () => {
  const events = ref<IEvent[]>([])
  const isLoading = ref(false)
  const isLoadingDetail = ref(false)
  const error = ref<string | null>(null)

  const getEventById = computed(() => {
    return (id: number) => events.value.find(event => event.id === id)
  })

  async function fetchEvents(force = false) {
    if (events.value.length > 0 && !force) return
    
    isLoading.value = true
    error.value = null
    
    // –î–ª—è –≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–∏
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      events.value = [
        { 
          id: 1, 
          title: '–õ–µ—Ç–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω –∫–æ–¥–∞', 
          is_team: false, 
          media: [
            { id: 1, url: 'https://images.unsplash.com/photo-1517694712202-14dd9538aa97?q=80&w=2070&auto=format&fit=crop', media_type: 'image', order: 1 },
            // –î–û–ë–ê–í–õ–ï–ù–´ –§–ê–ô–õ–´
            { id: 101, url: '/docs/rules.pdf', media_type: 'document', name: '–ü—Ä–∞–≤–∏–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞.pdf', order: 1},
            { id: 102, url: '/docs/tasks.docx', media_type: 'document', name: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π.docx', order: 2}
          ],
          date: '15.08.2024', 
          state: 'future', 
          max_members: 120, 
          description: '48 —á–∞—Å–æ–≤ –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á. –õ—É—á—à–∏–µ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏–∑—ã –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –æ—Ñ—Ñ–µ—Ä—ã –Ω–∞ —Ä–∞–±–æ—Ç—É. –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á, —Ä–∞–±–æ—Ç–∞—è –ø–ª–µ—á–æ–º –∫ –ø–ª–µ—á—É —Å –ª—É—á—à–∏–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω—ã. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞, –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∫–æ—Ñ–µ –∏ –ø–∏—Ü—Ü—É.'
        },
        { 
          id: 3, 
          title: '–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ', 
          is_team: true,
          media: [
            { id: 2, url: 'https://images.unsplash.com/photo-1581093450021-4a7360dde427?q=80&w=1887&auto=format&fit=crop', media_type: 'image', order: 1 },
            // –î–û–ë–ê–í–õ–ï–ù –§–ê–ô–õ
            { id: 201, url: '/docs/tech-regulations.pdf', media_type: 'document', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç.pdf', order: 1}
          ], 
          date: '25.07.2024', 
          state: 'current', 
          description: '–°–æ–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ä–æ–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª–æ—Å—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π. –§–∏–Ω–∞–ª—å–Ω–∞—è –±–∏—Ç–≤–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º! –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ª—É—á—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —É–º–æ–≤ –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ.',
          leaderboard: [
            { id: 10, name: 'CyberDudes', score: 850, avatarUrl: 'https://i.pravatar.cc/150?u=10' },
            { id: 11, name: 'RoboFriends', score: 820, avatarUrl: 'https://i.pravatar.cc/150?u=11' },
          ]
        },
        { 
          id: 4, 
          title: '–ö–≤–∏–∑ –ø–æ DevOps', 
          is_team: false, 
          media: [{ id: 3, url: 'https://images.unsplash.com/photo-1542744173-8e7e53415bb0?q=80&w=2070&auto=format&fit=crop', media_type: 'image', order: 1 }],
          date: '01.06.2024', 
          state: 'past', 
          description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞—Ç—Ç–ª –Ω–∞ –∑–Ω–∞–Ω–∏–µ CI/CD, Docker, Kubernetes –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.', 
          leaderboard: [
            { id: 1, name: '–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞', score: 100, avatarUrl: 'https://i.pravatar.cc/150?u=1' },
            { id: 2, name: '–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π', score: 95, avatarUrl: 'https://i.pravatar.cc/150?u=2' },
          ]
        },
      ];

    } catch (err: any) {
      error.value = err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      console.error(err)
    } finally {
      isLoading.value = false
    }
  }

  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π
  //   try {
  //     events.value = await fetchEventsApi()
  //   } catch (err: any) {
  //     error.value = err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
  //     console.error(err)
  //   } finally {
  //     isLoading.value = false
  //   }
  // }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è fetchEventByIdApi (–£–¥–∞–ª–∏)
  async function fetchEventById(id: number): Promise<IEvent | undefined> {
    isLoading.value = true;
    error.value = null;
    try {
      await new Promise(res => setTimeout(res, 300));
      const event = events.value.find(e => e.id === id);
      if (event) {
        if (!event.activities) {
          event.activities = [
            { icon: 'üóìÔ∏è', name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞', color: 'bg-blue-100' },
            { icon: 'üé§', name: '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ', color: 'bg-green-100' },
          ]
        }
      }
      return event;
    } catch(err) {
      error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ';
      return undefined;
    } finally {
      isLoading.value = false;
    }
  }

  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π
  // async function fetchEventById(id: number): Promise<IEvent | undefined> {
  //   isLoadingDetail.value = true;
  //   error.value = null;
  //   try {
  //     const fetchedEvent = await fetchEventByIdApi(id);
  //     const index = events.value.findIndex(e => e.id === id);

  //     if (index !== -1) {
  //       events.value[index] = { ...events.value[index], ...fetchedEvent };
  //     } else {
  //       events.value.push(fetchedEvent);
  //     }
  //     return events.value.find(e => e.id === id);
  //   } catch (err: any) {
  //     error.value = err.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID ${id}`;
  //     console.error(err);
  //     return undefined;
  //   } finally {
  //     isLoadingDetail.value = false;
  //   }
  // }

  function reset() {
    events.value = []
    error.value = null
  }

  return { 
    events,
    isLoading,
    isLoadingDetail,
    error,
    getEventById,
    fetchEvents,
    fetchEventById,
    reset
  }
})